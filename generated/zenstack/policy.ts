/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { type QueryContext, type CrudContract, type PermissionCheckerContext } from "@zenstackhq/runtime";
import { allFieldsEqual } from "@zenstackhq/runtime/validation";
import { type PolicyDef, type PermissionCheckerConstraint } from "@zenstackhq/runtime/enhancements/node";

const policy: PolicyDef = {
    policy: {
        user: {
            modelLevel: {
                read: { guard: User_read, },
                create: { guard: User_create, inputChecker: User_create_input, },
                update: { guard: User_update, },
                postUpdate: { guard: User_postUpdate, },
                delete: { guard: User_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        post: {
            modelLevel: {
                read: { guard: Post_read, },
                create: { guard: Post_create, inputChecker: Post_create_input, },
                update: { guard: Post_update, },
                postUpdate: { guard: Post_postUpdate, },
                delete: { guard: Post_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
    },
    validation: {
        user: { hasValidation: false },
        post: { hasValidation: false },
    },

};

function User_read(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_User_read(input: any, context: QueryContext): any {
    return false;
}

function User_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_User_create(input: any, context: QueryContext): any {
    return false;
}

function User_create_input(input: any, context: QueryContext): boolean {
    return false;
}

function User_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_User_update(input: any, context: QueryContext): any {
    return false;
}

function User_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_User_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function User_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_User_delete(input: any, context: QueryContext): any {
    return false;
}

function Post_read(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Post_read(input: any, context: QueryContext): any {
    return false;
}

function Post_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Post_create(input: any, context: QueryContext): any {
    return false;
}

function Post_create_input(input: any, context: QueryContext): boolean {
    return false;
}

function Post_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Post_update(input: any, context: QueryContext): any {
    return false;
}

function Post_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Post_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Post_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Post_delete(input: any, context: QueryContext): any {
    return false;
}
export default policy
